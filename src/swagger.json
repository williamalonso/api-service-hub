{
  "openapi": "3.0.0",
  "info": {
    "title": "API Service Hub Documentation",
    "description": "In this documentation you will be able to consult the API end-points and also test all available routes. Do not forget to register and carry out the authorization.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local"
    }
  ],
  "paths": {
    "/auth/create": {
      "post": {
        "summary": "Create a new user",
        "description": "Route responsible for creating a new user",
        "tags": ["Users"],
        "requestBody": {
          "description": "User data",
          "content": {
            "application/json": {
              "example": {
                "email": "newuser@test.com",
                "password": "password456"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "User created successfully"
                }
              }
            }
          },
          "400": {
            "description": "This email is already in use",
            "content": {
              "application/json": {
                "example": {
                  "message": "This email is already in use!"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user based on the data provided",
        "requestBody": {
          "description": "User login data",
          "content": {
            "application/json": {
              "example": {
                "email": "newuser@test.com",
                "password": "password456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successfull",
            "content": {
              "application/json": {
                "example": {
                  "message": "Login successfull"
                }
              }
            }
          },
          "401": {
            "description": "Wrong password or User does not exist",
            "content": {
              "application/json": {
                "example": {
                  "message": "Wrong password or User does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Creates a new token",
        "description": "Client can request a refresh token",
        "requestBody": {
          "description": "Refresh token",
          "content": {
            "application/json": {
              "example": {
                "_id": "651396bcc261e761124d60c8",
                "email": "william@teste.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token has been renewed",
            "content": {
              "application/json": {
                "example": {
                  "message": "Token has been renewed"
                }
              }
            }
          },
          "401": {
            "description": "User does not have any token to be renewed or User does not exist",
            "content": {
              "application/json": {
                "example": {
                  "message": "User does not have any token to be renewed or User does not exist"
                }
              }
            }
          },
          "500": {
            "description": "Error renewing token",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error renewing token"
                }
              }
            }
          }
        }
      }
    },
    "/admin/create": {
      "post": {
        "summary": "Creates a new demand",
        "description": "The logged user can create a new service demand based on the data provided",
        "requestBody": {
          "description": "Creates a new demand",
          "content": {
            "application/json": {
              "example": {
                "title": "thir user title demand",
                "description": "Service demand of second user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Demand created succesfuly",
            "content": {
              "application/json": {
                "example": {
                  "message": "Demand created succesfuly"
                }
              }
            }
          },
          "400": {
            "description": "Error creating demand",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error creating demand"
                }
              }
            }
          }
        }
      }
    },
    "/admin/demands/{userId}": {
      "get": {
        "summary": "List all user`s demand",
        "description": "List all user`s demand",
        "parameters": [
          {
            "name": "userId",
            "in": "path", 
            "required": true,
            "schema": {
              "type": "string",
              "example": "6516159b00b18103f29d7369"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "All demands listed succesfuly",
            "content": {
              "application/json": {
                "example": {
                  "message": "All demands listed succesfuly"
                }
              }
            }
          },
          "500": {
            "description": "Error fetching user demands",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error fetching user demands"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/admin/demand/{id}": {
      "get": {
        "summary": "List user demand by id",
        "description": "List user demand by id",
        "parameters": [
          {
            "name": "id",
            "in": "path", 
            "required": true,
            "schema": {
              "type": "string",
              "example": "651615d800b18103f29d736e"
            },
            "description": "Demand ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Demand listed succesfuly",
            "content": {
              "application/json": {
                "example": {
                  "message": "Demand listed succesfuly",
                  "demand": {
                    "_id": "651615d800b18103f29d736e",
                    "title": "Second user title demand",
                    "description": "Service demand of second user",
                    "user": "6516159b00b18103f29d7369"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error fetching demand by id",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error fetching demand by id"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "examples": {
          "jwtTokenExample": {
            "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...yourJWTTokenHere",
            "summary": "Token JWT example"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Demand": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}